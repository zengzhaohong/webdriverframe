

1、从对象角度看：老系统，新系统（公司最新或业界最新）；

2、性能测试需求入手点：

2.1 老系统性能测试需求分析
1）、输入：

   产品规格说明；
		产品经理，用户对我们的系统怎么使用（多少人，什么时间点，怎么用）；
		PS：产品经理的答案只能作为参考
   系统架构；
		系统架构师，沟通系统的物理架构和逻辑架构
		物理架构：系统上线后如何部署（用多少台机器，每一台的cpu、内存等怎么样）
		逻辑架构：系统上线后，数据在系统中是如何流向的（都有经过哪些模块，哪些是关键模块）；
   运维数据：
		运维工程师，沟通系统哪些业务在什么点峰值怎么样
   市场计划：
		产品经理或者项目市场负责人沟通
		沟通目的在于知道系统需不需要考虑扩展性；
   项目管理计划（老板意志）：
		项目经理，沟通项目发布的时间点，项目的商业亮点
		沟通目的：确定性能测试的优先级，其中老板意志优先考虑。
		
		
	PS：搞清楚用户模型，数据模型，系统增量模型

2）、设计：
		压测模型（指标，场景，如何测试）
		
3）、输出（性能测试需求）：
		场景和指标
		用户比例：做某件事的用户数/系统整体用户数；
		业务数据量
		
2.2 新系统性能测试需求分析

1）、输入：

   产品规格说明；
		产品经理，用户对我们的系统怎么使用（多少人，什么时间点，怎么用）；
		PS：产品经理的答案只能作为参考，新系统情况下，产品经理尤其只能作为参考
   系统架构；
		系统架构师，沟通系统的物理架构和逻辑架构
		物理架构：系统上线后如何部署（用多少台机器，每一台的cpu、内存等怎么样）
		逻辑架构：系统上线后，数据在系统中是如何流向的（都有经过哪些模块，哪些是关键模块）；
   运维数据：
		运维工程师，但是他是没有数据的
   市场计划：
		产品经理或者项目市场负责人沟通
		沟通目的在于知道系统需不需要考虑扩展性；
   项目管理计划（老板意志）：
		项目经理，沟通项目发布的时间点，项目的商业亮点
		沟通目的：确定性能测试的优先级，其中老板意志优先考虑。
		
		
	PS：搞清楚用户模型，数据模型，系统增量模型

2）、设计：
		压测模型（指标，场景，如何测试）
		
3）、输出（性能测试需求）：
		场景和指标
		用户比例：做某件事的用户数/系统整体用户数；
		业务数据量


	PS：这种场景下，可以采用性能测试的拐点模型来解决没有准确的用户数据的情况。


2.3 性能测试需求分析过程中的若干重要问题

	线上环境和测试环境差异
		1）、线上环境尽可能和线下环境保持一致；
		2）、等比例缩放，测试系统的扩展系统
		3）、线上压测
		4）、线上监控和自动扩容的功能来进行部署
		5）、线上环境和测试环境如果差异很大，不测，如果非要测试一定记得把风险说清楚
	
	如何区分功能和业务
		业务：直接带来收益的功能组合；
		功能：属于系统所有，直接支持或间接支持业务实现；
		测试的时候，优先测试业务的性能。
	
	技术之外最重要的事情
		和人打交道的能力。



3、性能测试需求分析实战

1）、需求1：

	如何判断那些业务放在同一个场景中。
		依据业务是不是发生在同一个时间段。
	
	注意区分几个概念：注册用户数、在线用户数，并发用户数
			其中只有并发用户数才会对系统产生压力
			PS：基于HTTP系统的系统 上面的说法ok的，
				如果是基于websocket协议的系统，在线用户数对系统造成的压力也要考虑；

	系统是面向未来考虑的，不是面向现在的
		考虑用户增长的时候，如果有明确的增长期限，用明确的期限，
		如果没有，至少一年（并且这种场景下，一定要把风险说清楚）


	计算TPS时的二八原则是个通用原则，但不是最对的原则，必须根据具体系统情况来做数值上的调整；
	
	数据准备：宁多勿少，至少一年的数据。


2）、需求2：	

	实际测试出来的各个业务的TPS一定是要大于等于计算出来的TPS。
	
	数据准备，系统没有明确说明的时候，至少1年，宁多勿少；系统有明确说明的时候，按照系统上的要求来做就好了。
